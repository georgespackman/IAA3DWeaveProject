from TexGen.Core import *
import math
path = "c:\\users\\emxghs\\desktop\\IAA3DWeaveProject\\parameterisedTextile\\"
#user specified properties

# #size of unit cell
# length=10
# width=10
# height=8
# Volume = length * width * height

# #ratios of warp:weft:binder channels per unit cell
# warpRatio=6
# binderRatio=1

# vf = 0.6
# fibreVolume = vf * Volume




# #These could be parameters if exists a range of reed sizes, units per inch 
# endsDensity = 20
# picksDensity = 16
# inch = 25.4

# #numBinderLayers
# numBinderLayers = 2

# #convert to per mm
# endsDensity = endsDensity/inch # based off reed size
# picksDensity = picksDensity/inch

# #calculate numbers of wefts and warps in a layer in unit cell
# numXYarns = int(endsDensity*length)
# numWefts = int(picksDensity*width)

# numWarps = 6 #math.ceil(warpRatio*numXYarns/(warpRatio + binderRatio))
# can think more about this when see more textile data

# #spacings 
# warpSpacing = float(length) / numXYarns
# weftSpacing = float(width) / numWefts
# print(length, width, numXYarns, numWefts)
# print("weftSpacing ", weftSpacing)
# print("warpSpacing ", warpSpacing)

# #binders must fit between weft yarns
# # if (weftSpacing < weftWidth + binderHeight):
	# # raise Exception("Not enough space between wefts, decrease picks density")


# binderYarns = [[0, 1, 2, 1, 1, 1], [3, 4, 5, 6, 4, 3]]
# #Check if length of binderYarns positions equal to numWefts
# for Yarn in binderYarns:
	# if len(Yarn) != numWefts: 
		# raise Exception("Too many binder yarn positions specified, must be equal to number of wefts. Change picks density")


# #calculate the yarn volume in each layer (both warp and weft)
# layerVolume = (warpHeight + weftHeight)*length*width
# print("layerVolume ", layerVolume)

# #extra weft layer volume 
# weftlayerVolume = weftHeight*length*width
# print("weftlayerVolume ", weftlayerVolume)

# #reserve a min binder volume for layers above and below textile
# minBinderVolume = 2 * binderHeight * width * length
# print("minBinderVolume ", minBinderVolume)



# #max number of possible layers with binder and additional weft layer accounted for - George check this is Kosher
# numWarpLayers = int((Volume - minBinderVolume) / layerVolume) 
# #numWarpLayers = int(Volume / layerVolume)
# numWeftLayers = numWarpLayers + 1
# numLayers = numWarpLayers + numWeftLayers



def GenerateDesignSpace(path, vf, tol, thickness, numberFilamentsWarp, numberFilamentsWeft, numberFilamentsBinder):
	"""
	Function to set the design space based on user input. Takes the target volume fraction, volume fraction tolerance
	and thickness and returns the number of layers, actual volume fraction and spacings.
	
	Binder pattern and other geometrical values then generated by optimisation
	
	"""
	#size of single cell dependent on the yarn type
	#Assume for now the yarn type is fized at 12k
	#yarn size could be parameter, initally assuming all single type of yarn, below is Hexcel IM7 tow, max packing fraction of 0.9
	filamentArea = math.pi * ((0.0026)**2)
	#numberFilamentsWarp = 12000
	warpYarnArea = (filamentArea*numberFilamentsWarp)/0.9
	radius = math.sqrt(warpYarnArea/math.pi)
	warpWidth = 4*radius
	warpHeight = 1*radius

	#numberFilamentsWeft = 12000
	weftYarnArea = (filamentArea*numberFilamentsWeft)/0.9
	radius = math.sqrt(warpYarnArea/math.pi)
	weftWidth = 4*radius
	weftHeight = 1*radius

	#numberFilamentsBinder = 12000
	binderYarnArea = (filamentArea*numberFilamentsBinder)/0.9
	radius = math.sqrt(warpYarnArea/math.pi)
	binderWidth = 4*radius
	binderHeight = 1*radius
	
	
	cellWidth = weftWidth + 0.05*weftWidth
	cellLength = warpWidth + 0.05*warpWidth
	
	cellVolume = cellWidth  * cellLength * thickness
	cellFibreVolume = vf * cellVolume
	
	yarnfvf = (filamentArea * numberFilamentsWarp) / warpYarnArea
	
	cellYarnVolume = cellVolume * vf / yarnfvf
	
	#calculate the yarn volume in each layer (both warp and weft)
	cellLayerVolume = (warpHeight + weftHeight)*cellLength*cellWidth
	print("cellLayerVolume is ", cellLayerVolume)
	
	weftlayerVolume = weftHeight*cellLength*cellWidth
	
	numLayers = int(cellYarnVolume / cellLayerVolume)
	print("numLayers = ", numLayers)
	




	#max number of possible layers with binder and additional weft layer accounted for - George check this is Kosher
	numWarpLayers = int((cellVolume) / cellLayerVolume) 
	#numWarpLayers = int(Volume / layerVolume)
	numWeftLayers = numWarpLayers + 1
	numLayers = numWarpLayers + numWeftLayers
	print("numLayers = ", numLayers)
	
	#max binder volume given by numWarpLayers
	maxBinderVolume = (numWeftLayers)* binderHeight * cellWidth * cellLength
	maxnumBinderLayers = numWeftLayers 
		
	#maxSpacing - change this when you have worked out how to do this
	
	minSpacing = binderHeight
	upper = (2*cellFibreVolume/(vf-0.5*tol*vf)) - cellVolume
	maxSpacing = upper/thickness
	print("maxSpacing ", maxSpacing)

	
	return numWeftLayers, numWarpLayers, maxnumBinderLayers, maxSpacing
	
	
	
tol = 0.05
vf=0.6
thickness = 8
numberFilamentsWarp = 12000
numberFilamentsWeft = 12000
numberFilamentsBinder = 12000

numWeftLayers, numWarpLayers, maxnumBinderLayers, maxSpacing = GenerateDesignSpace(path, vf, tol, thickness, numberFilamentsWarp, numberFilamentsWeft, numberFilamentsBinder)
	#pass numlayers from here into Matlab and have matlab generate the binder pattern + spacings that will set the unit cell size
modelName = "weave"
file = open(path + modelName +  "DesignSpace.txt", "a")
file.write(str(numWeftLayers) + ", " + str(maxnumBinderLayers) + str(maxSpacing))
	